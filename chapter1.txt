Git users can broadly be grouped into four categories for the purposes of describing
here a small set of useful command for everyday Git.

>>Individual Developer (Standalone): commands are essential for anybody who makes a commit,
 even for somebody who works alone.

>>If you work with other people, you will need commands listed in the Individual Developer
 (Participant) section as well.

>>People who play the Integrator role need to learn some more commands in addition to the above.

>>Repository Administration commands are for system administrators who are responsible for 
the care and feeding of Git repositories.


Individual Developer (Standalone):
A standalone individual developer does not exchange patches with other people,
and works alone in a single repository, using the following commands.

> git init: to create or initialize a new repository.

> git add: this is used to add file to the local repo in other to begin to track the file,
just type 'git add' plus the file name and extention the hit enter. eg; git add chapter1.txt.
note; using "git add ." adds everything in your current directory.

> git status: this is to see whats inside your staging area or the status to your files.
the info from the 'git status' command can be shorthened by using the command 'git status -s' or 'git status --short'



> git diff: this is similar to git status but abit different, this command logs the difference
between the last commits on the terminal.

> to see differences between two stages: use thw command; git diff --staged.
to get a more accurate comparison data, use the cammand; git diff --staged --no-renames 

> git commit: this is used to commit a file under version control, the "-m" flag is used
to add a commit message. eg; git commit -m " this is the first part".

> git log: this is used to see the commit you have made or what happened.
> more git log commands: git log -'the number of commits you want it to show' ; this shows what ever recent number of commit you
want it to show when indicate by the number eg; git log -1.
git log --online ; this shows all the recent commit in a one line format.
git log --stat; this shows the log in a coincive git status kind of format.
git log --patch; this shows a very detail log of information.

> git checkout: this is used to revert to the last committed version of a file.

> git rm 'followed by the file name you wish to removed': this commamd is used to
remove file from git

>to rename a file: use the command; git mv 'follow the name of the file' and then 'the new name'.
eg; git mv alien.txt spaceship.txt

> rm .git/index.lock ; this is used to remove error.

> to open a file from git : use the command; open -a ' followed by the text editor name and then the filename and extension'
eg; open -a notepad chapter1.txt

> to push on github: "git remote add origin" and then the repo address then hit enter. eg;
	git remote add origin https://github.com/dollasun/Git-Commands.git

>to push to remote repository: "git push -u origin master". note; 'git push origin master' can also be used.
 "master" is the project branch you're pushing to on the remote repo.

> remove an already added file to the staging area: git rm --cached -r "then the file name and extension".
	to remove all the files in the staging area; git rm --cached -r .
	the ' r ' in the command stands for recursive.

> the 'git stash' command: this is used to save file you dont want to commit in a work WIP "work in progress terminal".
to see all the list of work in progress file, use the command; git stash list
>'git stash show'; gives a better descriptive information of all the stashed files.
> 'git stash pop': this command is used to drop stashed files from the WIP area back to their original
file directory.

> the 'git reset' command : this help to move commits back to the staging area or working directory.
the various git reset command are;
>> git reset --soft: this moves file from the local repo to the staging area.
>> git reset --mixed (or 'git reset'): this moves file from the local repo back to the working directory.
>> git reset --hard: this moves file from the local repo to the trash.

> the "man git" command pops up all the everyday git commands you need to know on terminal.

> the "git help" command pops up the different git commands on your browser window.
